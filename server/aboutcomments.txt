- json 파일 주석처리를 위한 text 파일 입니다.

파일명: nodemon.json 
{
    "watch": ["src"], //nodemon 실행 시 src 폴더를 감시하고 변경사항을 반영
    "ignore": ["db/**/*"], //변경되더라도 무시하고 새로고침하지 않는 부분
    "env": { //환경설정을 위한 처리
        "NODE_ENV": "development"
    }
}

- 2021 08 24 nodemon 내부 또는 명령 뭐시기 오류 난거때문엗ㄷ또ㅗㅇ머ㅗ라ㅓ뫄ㅗㅈ!!!! 20분날림 아진짜..

해결방법: 터미널에서 전역적으로 nodemon 설치가 필요
터미널에서 루트 폴더 중심으로 두고 명령어 입력 > npm install -g nodemon

- server/src/index.js ref

app[method](route, handler or callback)
> route 각각이 api 명령어가 됨

app.get('/', (req, res) => {
    res.send('ok')
}) //get 라우트 /를 타고 들어왔을때 send 명령어를 실행하겠다는 말

app.post('/messages', (req,res) => {
    res.send('ok')
})

app.put('/messages/:id', (req,res) => {
    res.send('ok')
})

app.delete(...)

- server/src/routes/messages.js ref

app.method를 배열로 만든 이유 > 좀 더 효율적인 CRUD를 위해?

//GET MESSAGES 전체 메시지를 가져오기(default)
//가장 기본적인 형태의 get method 구현
    { 
        method: 'get',
        route: '/messages',
        handler: (req, res) => {
            res.send()
        }
    } 

잡담이지만, 나의 이력서를 면접때 만난 인사담당자에게 전달하고 각인시키기 위함은
const imurcoworker = readDB('moony_cv')
res.send(imurcoworker)
이건가....?

//CREATE MESSAGES 새로운 데이터 생성
    { 
        method: 'post',
        route: '/messages',
        handler: ({ body, params, query }, res) => {
            res.send()
        }
    }

- server/src/routes/messages.js ref 2

주소창에 localhost:8000/messages/44 를 치면 error가 뜨는데 이유는 
주소창에 입력되는 44라는 숫자는 문자열로 인식되기 때문
따라서 server/src/db/messages.json의 id부분이 숫자로 되어있다면 ""안에 넣어 문자열로 바꿔줘야함

Aㅏ... 이부분 자동 바꾸는 방법 몰라서 노가다 함 화나는군... 

- messages.js의 DELETE 부분

    { //DELETE MESSAGES
        method: 'delete',
        route: '/messages/:id',
        handler: ({ body, params:{ id }}, res) => {
            try {
                const msgs = getMsgs()
                const targetIndex = msgs.findIndex(msg => msg.id === id)
                if (targetIndex < 0) throw '메시지가 없습니다.'
                if (msgs[targetIndex].userId !== body.userId) throw '사용자가 다릅니다.'

                msgs.splice(targetIndex, 1)
                setMsgs(msgs) 
                res.send(id) //삭제가 성공했을때 해당 id가 삭제되었다는 것을 제공하게 됨
            } catch (err) {
                res.status(500).send( { error: err }) 
            }
        }
    }

axios의 GET과 DELETE는 인자가 1개이고 url부분 뒤에 붙는 data를 받는 영역이 없으므로 
즉, userId라는 객체가 config 안에 들어가 있는 것임
따라서 params가 아니라 query 또는 url에 입력된 값을 가져와서 비교해야함

즉, MsgList > onDelete의 
const receivedId = await fetcher('delete', `/messages/${id}?userId={userId}`, { params: {userId }})
또는 const receivedId = await fetcher('delete', `/messages/${id}`, { userId })

- request 확인하는 부분 추가

        method: 'delete',
        route: '/messages/:id',
        handler: (req, res) => {
            console.log(req)
            const {
                params: { id },
                query: { userId },
            } = req
            try {
                const msgs = getMsgs()
                const targetIndex = msgs.findIndex(msg => msg.id === id)
                if (targetIndex < 0) throw '메시지가 없습니다.'
                if (msgs[targetIndex].userId !== userId) throw '사용자가 다릅니다.'

                msgs.splice(targetIndex, 1)
                setMsgs(msgs) 
                res.send(id) //삭제가 성공했을때 해당 id가 삭제되었다는 것을 제공하게 됨
            } catch (err) {
                res.status(500).send( { error: err }) 
            }
        }

!!!즉!!!
MsgList의 delete는 id를 보내고 뒤에 params를 보내고 
이 params라고 하는 값은 서버 단인 messages.js에서 query로 받게 된다.

//원본
    { //DELETE MESSAGES
        method: 'delete',
        route: '/messages/:id',
        handler: ({ params:{ id }, query: { userId } }, res) => { //aboutcomments.txt ln72 참고
            console.log(req) //aboutcomments.txt ln101 참고
            try {
                const msgs = getMsgs()
                const targetIndex = msgs.findIndex(msg => msg.id === id)
                if (targetIndex < 0) throw '메시지가 없습니다.'
                if (msgs[targetIndex].userId !== userId) throw '사용자가 다릅니다.'

                msgs.splice(targetIndex, 1)
                setMsgs(msgs) 
                res.send(id) //삭제가 성공했을때 해당 id가 삭제되었다는 것을 제공하게 됨
            } catch (err) {
                res.status(500).send( { error: err }) 
            }
        }
    }